#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *left;
    Node *right;
    Node(int d)
    {
        data = d;
        left = NULL;
        right = NULL;
    }
};
Node *insert(Node *node, int target)
{
    if (node == NULL)
    {
        Node *temp = new Node(target);
        return temp;
    }
    //
    if (node->data > target)
    {
        node->left = insert(node->left, target);
    }
    else
    {
        node->right = insert(node->right, target);
    }
    return node;
}

void inorder(Node *node)
{
    if (node == NULL)
    {
        return;
    }
    inorder(node->left);
    cout << node->data << " ";
    inorder(node->right);
}
bool search(Node *node, int target)
{
    if (node == NULL)
    {
        return false;
    }
    bool left = false;
    bool right = false;
    if (node->data == target)
    {
        return true; // Element found at the root node. Return true immediately to avoid unnecessary traversal.
    }
    if (node->data > target)
    {
        left = search(node->left, target);
    }
    else if (node->data < target)
    {
        right = search(node->right, target);
    }
    return right || left;
}
bool search1(Node *node, int target)
{
    if (node == NULL)
        return false;
    if (node->data == target)
    {
        return true;
    }
    else if (node->data > target)
    {
        return search1(node->left, target);
    }
    else
    {
        return search1(node->right, target);
    }
}
Node *minValueNode(Node *node)
{
    if (node == NULL)
        return NULL;
    while (node->left != NULL)
    {
        node = node->left;
    }
    return node;
}
Node *delete1(Node *root, int target)
{
    if (root == NULL)
        return NULL;
    // if the node is leaf, then delete the node then return NULL
    if (target < root->data)
    {
        root->left = delete1(root->left, target);
    }
    else if (target > root->data)
    {
        root->right = delete1(root->right, target);
    }
    else
    {
        if (root->left == NULL && root->right == NULL)
        {
            delete root;
            root = NULL;
            return root;
        }
        // if the node is having the left child , the right  child will be is null then return the left child
        else if (root->right == NULL && root->left->data != NULL)
        {
            Node *temp = root->left;
            delete root;
            return temp;
        }
        //   if the node is having the right child , the the return the right child of the node
        else if (root->left == NULL && root->right != NULL)
        {
            Node *temp = root->right;
            delete root;
            return temp;
        }
        //   if the node is having both the left and right children
        // then find the left highest child and then swap
        else if (root->left != NULL && root->right != NULL)
        {
            Node *temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = delete1(root->right, temp->data);
        }
    }

    return root;
}
Node *delete2(Node *root, int key)
{
    if (root == NULL)
    {
        return NULL;
    }
    if (root->data == key)
    {
        // wahi 4 cases]
        if (root->left == NULL && root->right == NULL)
        {
            delete root;
            root = NULL;
            return root;
        }
        // if the node is having the left child , the right  child will be is null then return the left child
        else if (root->right == NULL && root->left->data != NULL)
        {
            Node *temp = root->left;
            delete root;
            return temp;
        }
        //   if the node is having the right child , the the return the right child of the node
        else if (root->left == NULL && root->right != NULL)
        {
            Node *temp = root->right;
            delete root;
            return temp;
        }
        //   if the node is having both the left and right children
        // then find the left highest child and then swap
        else if (root->left != NULL && root->right != NULL)
        {
            Node *temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = delete1(root->right, temp->data);
        }
    }
    else if (root->data > key)
    {
        return delete1(root->right, key);
    }
    else if (root->data < key)
    {
        return delete1(root->left, key);
    }
    return root;
}
int main()
{
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int n = sizeof(arr) / sizeof(arr[0]);
    Node *root = NULL;
    for (int i = 0; i < n; i++)
    {
        root = insert(root, arr[i]);
    }
    inorder(root);
    cout << endl;
    delete2(root, 5);
    inorder(root);

    // inorder(root);
    // cout<<endl;
    // int target = 51;  // Change this value to search for a different element in the BST.
    // bool ans = search1(root,target);
    // if(!ans){
    //     cout<<"Element not found";
    // }
    // else{
    //     cout<<"Element found at index ";
    // }
}
