#include<iostream>
using namespace std;
int binarySearch(int arr[],int n,int target){
    int low = 0,high = n-1;
    while(low <= high){
        int mid = low +(high-low)/2;
        if(arr[mid]== target){
            return mid;
        }
        else if(arr[mid]<target){
                low = mid+1;
        }
        else{
            high = mid-1;
        }
    
    }
    return -1;
}
int firstOccurance(int arr[],int n,int target){
    int low =0,high = n-1,ans =-1;
    while(low <= high){
        int mid = low+(high-low)/2;
        if(arr[mid]==target){
            ans= mid;
            high = mid-1;
    }
    else if(arr[mid]<target){
        low =mid+1;
    }
    else{
        high = mid -1;
    }
}
    return ans;
}
int lastOccurence(int arr[], int n, int target){
    int low = 0,high= n-1,ans =-1;
    while(low<= high){
        int mid = low+(high-low)/2;
        if(arr[mid]==target){
            ans  =mid;
            low = mid+1;
        }
        else if(arr[mid]<target){
            low = mid+1;
        }
        else{
            high = mid-1;
        }
    }
    return ans;
}
// int findFloor(int arr[],int n,int target){
//     int low = 0,high = n-1,ans =-1;
//     while(low <= high){
//         int mid = low+(high - low)/2;
//         if(arr[mid]==target){
//             ans = arr[mid];
//             low =mid+1;
//         }
//         else if(arr[mid]<target){
//             low= mid+1;
//         }
//         else{
//             high = mid-1;
//         }
//     }
//     return ans;
// }
int findFloor(int arr[], int n, int target) {
    int low = 0, high = n - 1, ans = -1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] <= target) {
            ans = arr[mid];
            low = mid + 1;
        } else high = mid - 1;
    }
    return ans;
}
int findCeiling(int arr[],int n,int target){
    int low =0,high = n-1,ans = -1;
    while(low <=high){
        int mid = low+(high - low) / 2;
       if(arr[mid] <= target) {
        ans = arr[mid];
        high = mid - 1;
       }
        else{
            high = mid-1;
        }
    }
    return ans;
}
int findPeakElement(int arr[],int n){
    int low = 0,high = n-1;
    while(low<high){
        int mid= low+(high - low) / 2;
        if(arr[mid]>arr[mid+1]){
            high = mid;
        }
        else{
            low = mid+1;
        }
    }
    return arr[high];
}
// int searchRotated(int arr[],int n,int target){
//     int low =0,high = n-1;
//     while(low <= high){
//         int mid = low+(high - low)/2;
//         if(arr[mid]== target){
//             return mid;
//         }
//         if
//     }
// }
int BinarySqrt(int n){
    int low = 1,high =n,ans =-1;
    while(low <= high){
        int mid = low +(high - low)/2;
        if(mid*mid==n){
            return mid;
        }
        else if(mid*mid<n){
            low = mid+1;
        }
        else{
            ans =mid;
            high = mid -1;
        }
    }
    return ans;
}
int binarySearch(int arr[],int low,int high,int target){
    
    while(low<=high){
        int mid = low + (high - low)/2;
        if(arr[mid]==target){
            return mid;
        }
        else if(arr[mid]<target){
            low = mid+1;
        }
        else{
            high = mid-1;
        }
    }
}
int searchInfiniteArray(int arr[],int target){
    int low = 0,high =1;
    while(arr[high]<target){
        low = high ;
        high = 2*high;
    }
    return binarySearch(arr,low,high,target);
}
int cubeBinarySqrt(int n){
    int low =1,high= n,ans =-1;
    while(low<high){
        int mid = low+(high-low);
        if(mid*mid*mid==n){
            return mid;
        }
        else if(mid*mid*mid<n){
            low = mid+1;
        }
        else{
            ans = mid;
            high = mid-1;
        }
    }
    return ans;
}
int findPeakElement(int arr[],int n,int target){
    int low =0,high = n-1;
    while(low<high){
        int mid= low+(high - low)/2;
        if(arr[mid]>arr[mid+1]){
            high = mid;
        }
        else{
            low = mid+1;
        }
    }
    return arr[high];
}
int main(){
    // // 1. Find Target in Sorted Array
    // Problem: Given a sorted array arr[] and an integer target, return the index of target in arr[]. If not found, return -1
    // int arr[]={1,3,5,7,9};
    // int n = sizeof(arr)/sizeof(arr[0]);
    // int target = 7;
    // cout<<binarySearch(arr,n,target);
    // return 0;
    // 2. Find First Occurrence of Target
    // Problem: Find the first occurrence of target in a sorted array. If not found, return -1.
    // int arr[]={1,2,2,3,4};
    // int n = sizeof(arr)/sizeof(arr[0]);
    // int target = 2;
    // cout<<findFloor(arr,n,target);
    // return 0;
    // 4. Find Floor of Target
    // Problem: Find the greatest element smaller than or equal to target in a sorted array.
//     5. Find Ceiling of Target
// Problem: Find the smallest element greater than or equal to target in a sorted array.

    // int arr[]={1,2,3,4,5};
    // int n= sizeof(arr)/sizeof(arr[0]);
    // int target = 3;
    // cout<<findCeiling(arr,n,target);

    // Medium Questions
    // Problem: A peak element in an array is an element that is greater than its neighbors. Find any peak element in a given array.
    // int arr[]={10,20,50,40,30};
    // int n=sizeof(arr)/sizeof(arr[0]);
    // cout<<findPeakElement(arr,n);
    // return 0;

    // 2. Search in Rotated Sorted Array
    // int arr[]={30,40,50,10,20};
    // int n= sizeof(arr)/sizeof(arr[0]);
    // int target = 10;
    // cout<<searchRotated(arr,n,target);

    // 3. Find Square Root (Integer Part)
    // int n =16;
    // cout<<BinarySqrt(n);
    // 5
    // Find Position of Element in Infinite Sorted Array 
    // int arr[] = {1, 3, 5, 7, 10, 15, 20, 40, 50, 70, 100, 200, 400, 800}; 
    // int target = 15;
    // cout<<"Index of :"<<target<<"is :" <<searchInfiniteArray(arr,target)<<endl;
    // int n=64;
    // cout<<cubeBinarySqrt(n);
    // Find the Peak Element in an Array
        int arr[]={10,20,50,40,30};
        int n=sizeof(arr)/sizeof(arr[0]);
        cout<<findPeakElement(arr,n);
        return 0;

}
